package com.example.busservice1.Controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import Service.com.bus.BusService;
import Service.com.bus.RouteDetailsService;
import Service.com.bus.RouteService;
import dto.com.bus.BusDto;
import model.com.bus.Bus;
import model.com.bus.Route;
import model.com.bus.RouteDetails;

@RestController
@RequestMapping("/api/v1/buses")
public class BusController {
	
    @Autowired
    private BusService busService;

    
    
   

    public BusDto busConvertToDto(Bus bus) {
    	BusDto busDto = new BusDto(bus.getBusId(),bus.getBusNo(),bus.getRegNo(),bus.getEngineNo(), bus.getBusType(),bus.getBusName(), bus.getTotalSeats());
    	return busDto;
    	}
    
    public Bus busConvertToEntity(BusDto bus) {
    	Bus bus1 = new Bus(bus.getBusId(),bus.getBusNo(),bus.getRegNo(),bus.getEngineNo(), bus.getBusType(),bus.getBusName(), bus.getTotalSeats());
    	return bus1 ;
    	}
    
    @PostMapping("/bus")
    public ResponseEntity<BusDto> create(@RequestBody BusDto busDto){
    Bus bus = busConvertToEntity(busDto);
    Bus createdBus = busService.save(bus);
    BusDto dto = busConvertToDto(createdBus);
    return ResponseEntity.status(HttpStatus.CREATED).body(dto);
    }

    @GetMapping("/bus")
    public ResponseEntity<List<BusDto>> getAllBus(){
    List<Bus> bus = busService.getall();
    if(bus.isEmpty())
    return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    List<BusDto> busDto=bus.stream().map(bus1 -> busConvertToDto(bus1)).collect(Collectors.toList());
    return ResponseEntity.status(HttpStatus.OK).body(busDto);
    }

    @GetMapping("/bus/{busId}")
    public ResponseEntity<BusDto> getBus(@PathVariable int busId){


    Optional<Bus> busOpt = busService.getbybusId(busId);
    if(busOpt.isEmpty())
    return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
    Bus bus = busOpt.get();
    BusDto dto = busConvertToDto(bus);
    return ResponseEntity.status(HttpStatus.OK).body(dto);
    }
    
    
    
    
    

//    @PostMapping("/bus")
//    public ResponseEntity<Bus> create(@RequestBody Bus bus){
//    	
//    	busService.save(bus);
//        return ResponseEntity.status(HttpStatus.CREATED).body(bus);
//    }
//    @GetMapping("/bus")
//    public List<Bus> getall()
//    {
//    	 return busService.getall();
//    }
//    @GetMapping("/bus/{busId}")
//    public ResponseEntity<Optional<Bus>> getbybusId(@PathVariable int busId)
//    {
//    	Optional<Bus> b=busService.getbybusId(busId);
//    	 if(b.isPresent())
//    	 {
//    		 return ResponseEntity.ok().body(b);
//    	 }
//    	 else
//    	 {
//    		 return ResponseEntity.notFound().build();
//    	 }
//    }
    
    
    @PutMapping("/bus")
    public ResponseEntity<BusDto> updatebus(@RequestBody BusDto bus)
    {
    	Optional<Bus> busOpt = busService.getbybusId(bus.getBusId());
        if(busOpt.isEmpty())
        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        Bus savedbus = busConvertToEntity(bus);
        Bus save = busService.save(savedbus);
        return ResponseEntity.status(HttpStatus.OK).body(busConvertToDto(save));
    	 
    }
    @DeleteMapping("/bus/{busId}")
    public ResponseEntity deletebus(@PathVariable int busId)
    {
    	Optional<Bus> b=busService.getbybusId(busId);
    	 if(b.isPresent())
    	 {
    		 busService.delete(busId);
    		 return ResponseEntity.ok().build();
    	 }
    	 else
    	 {
    		 return ResponseEntity.notFound().build();
    	 }
    }
    
    
    
    
    
    
    
    
    
    
   
//    @GetMapping("/route/routes/")
//    public  List<Integer> getroutes(@RequestBody Route route){
//    	List<Integer> s=routeService.findRouteIdsBySource(route.getSource());
//    	List<Integer> d=routeService.findRouteIdsByDest(route.getDestination());
//    	List<Integer> a=new ArrayList<Integer>();
//    	
//    	for(int i=0;i<s.size();i++)
//    	{
//    		for(int j=0;j<d.size();j++)
//    		{
//    			if(s.get(i)==d.get(j))
//    			{
//    				a.add(s.get(i));
//    			}
//    		}
//    	}
//    	return a;
//    	
//    	
//    }
  

}
