package com.example.busservice1.Controller;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;

import com.example.busservice1.Service.RouteService;
import com.example.busservice1.dto.BusDto;
import com.example.busservice1.dto.RouteDto;
import com.example.busservice1.model.Bus;
import com.example.busservice1.model.Route;

public class RouteController {
	
	@Autowired
    private RouteService routeService;
	
	public RouteDto routeConvertToDto(Route route) {
		return new RouteDto(route.getRouteId(), route.getSource(),route.getDestination(), route.getTotalDistance(), route.getFarePerKm());
		}

		public Route routeConvertToEntity(RouteDto routeDto) {
		Route route = new Route(routeDto.getRouteId(),routeDto.getSource(),routeDto.getDestination(),routeDto.getTotalDistance(),routeDto.getFarePerKm());
		return route;
		}
		
		 @PostMapping("/route")
		    public ResponseEntity<RouteDto> create(@RequestBody RouteDto rDto){
		    Route route = routeConvertToEntity(rDto);
		    Route createdRoute = routeService.save(route);
		    RouteDto dto = routeConvertToDto(createdRoute);
		    return ResponseEntity.status(HttpStatus.CREATED).body(dto);
		    }

		    @GetMapping("/route")
		    public ResponseEntity<List<RouteDto>> getAllRoute(){
		    List<Route> route = routeService.getall();
		    if(route.isEmpty())
		    return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
		    List<RouteDto> routeDto=route.stream().map(r1 -> routeConvertToDto(r1)).collect(Collectors.toList());
		    return ResponseEntity.status(HttpStatus.OK).body(routeDto);
		    }

		    @GetMapping("/route/{routeId}")
		    public ResponseEntity<RouteDto> getroute(@PathVariable int routeId){


		    Optional<Route> routeOpt = routeService.getbyrouteId(routeId);
		    if(routeOpt.isEmpty())
		    return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		    Route route = routeOpt.get();
		    RouteDto dto = routeConvertToDto(route);
		    return ResponseEntity.status(HttpStatus.OK).body(dto);
		    }
		    
		    @PutMapping("/route")
		    public ResponseEntity<RouteDto> updateroute(@RequestBody RouteDto route)
		    {
		    	Optional<Route> routeOpt = routeService.getbyrouteId(route.getRouteId());
		        if(routeOpt.isEmpty())
		        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		        Route saved = routeConvertToEntity(route);
		        Route save = routeService.save(saved);
		        return ResponseEntity.status(HttpStatus.OK).body(routeConvertToDto(save));
		    	 
		    }
		    @DeleteMapping("/route/{routeId}")
		    public ResponseEntity<?> deleteroute(@PathVariable int routeId)
		    {
		    	Optional<Route> b=routeService.getbyrouteId(routeId);
		    	 if(b.isPresent())
		    	 {
		    		 routeService.delete(routeId);
		    		 return ResponseEntity.ok().build();
		    	 }
		    	 else
		    	 {
		    		 return ResponseEntity.notFound().build();
		    	 }
		    }
		    
	
	
	
	
}
