package com.example.busservice1.Controller;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.busservice1.Service.RouteDetailsService;
import com.example.busservice1.dto.RouteDto;
import com.example.busservice1.model.Route;
import com.example.busservice1.model.RouteDetails;

@RestController
@RequestMapping("/api/v1/buses")
public class RouteDetailsController {
	 @Autowired
	    private RouteDetailsService routeDetailsService;
	 
	  @GetMapping("/routeDetails/r/{source}/{destination}")
	    public List<Integer> findDistinctRouteIdsByHault(@PathVariable String source,@PathVariable String destination)
	    {
	    	List<Integer> list=routeDetailsService.findDistinctRouteIdsByHault(source,destination);
	    	return list;
	    }
	    

	    @GetMapping("/routeDetails/{routeId}")
	    public String[] searchforStops(@PathVariable int routeId)
	    {
	    	List<RouteDetails> l=routeDetailsService.search(routeId);
	    	String[] a=new String[l.size()];
	    	for(int i=0;i<l.size();i++)
	    	{
	    		a[i]=l.get(i).getHault();
	    	}
	    	
	    	return  a;
	    }
	    
	    @PostMapping("/route")
	    public ResponseEntity<RouteDto> create(@RequestBody RouteDto rDto){
	    Route route = routeConvertToEntity(rDto);
	    Route createdRoute = routeService.save(route);
	    RouteDto dto = routeConvertToDto(createdRoute);
	    return ResponseEntity.status(HttpStatus.CREATED).body(dto);
	    }

	    @GetMapping("/route")
	    public ResponseEntity<List<RouteDto>> getAllRoute(){
	    List<Route> route = routeService.getall();
	    if(route.isEmpty())
	    return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
	    List<RouteDto> routeDto=route.stream().map(r1 -> routeConvertToDto(r1)).collect(Collectors.toList());
	    return ResponseEntity.status(HttpStatus.OK).body(routeDto);
	    }

	    @GetMapping("/route/{routeId}")
	    public ResponseEntity<RouteDto> getroute(@PathVariable int routeId){


	    Optional<Route> routeOpt = routeService.getbyrouteId(routeId);
	    if(routeOpt.isEmpty())
	    return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
	    Route route = routeOpt.get();
	    RouteDto dto = routeConvertToDto(route);
	    return ResponseEntity.status(HttpStatus.OK).body(dto);
	    }
	    
	    @PutMapping("/route")
	    public ResponseEntity<RouteDto> updateroute(@RequestBody RouteDto route)
	    {
	    	Optional<Route> routeOpt = routeService.getbyrouteId(route.getRouteId());
	        if(routeOpt.isEmpty())
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
	        Route saved = routeConvertToEntity(route);
	        Route save = routeService.save(saved);
	        return ResponseEntity.status(HttpStatus.OK).body(routeConvertToDto(save));
	    	 
	    }
	    @DeleteMapping("/route/{routeId}")
	    public ResponseEntity<?> deleteroute(@PathVariable int routeId)
	    {
	    	Optional<Route> b=routeService.getbyrouteId(routeId);
	    	 if(b.isPresent())
	    	 {
	    		 routeService.delete(routeId);
	    		 return ResponseEntity.ok().build();
	    	 }
	    	 else
	    	 {
	    		 return ResponseEntity.notFound().build();
	    	 }
	    }
	    







}
